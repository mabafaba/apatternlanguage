x<-system.file("","apl.Rmd",package = "apatternlanguage")
rmarkdown::render(x,output_file = './a_pattern_language.html',output_dir = './')
getwd()
rmarkdown::render(x,output_file = './a_pattern_language.html',output_dir = '~')
source('~/.active-rstudio-document', echo=TRUE)
x<-system.file("","apl.Rmd",package = "apatternlanguage")
rmarkdown::render(x,output_file = './a_pattern_language.html',output_dir = '~')
browseURL('./a_pattern_language.html')
x<-system.file("","apl.Rmd",package = "apatternlanguage")
rmarkdown::render(x,output_file = './a_pattern_language.html',output_dir = '~/')
library(apatternlanguage)
x<-system.file("","apl.Rmd",package = "apatternlanguage")
rmarkdown::render(x,output_file = './a_pattern_language.html',output_dir = '~/')
library(apatternlanguage)
x<-system.file("","apl.Rmd",package = "apatternlanguage")
rmarkdown::render(x,output_file = './a_pattern_language.html',output_dir = '~/')
browseURL('./a_pattern_language.html')
source('~/apatternlanguage/R/graph_bootstrap.R')
source('~/apatternlanguage/R/graph_bootstrap.R')
#' plotting the local part of a graph
#'
#' @param g igraph graph object
#' @export
g_plot_local<-function(g,v,direction = "upstream",max.levels = 3,...){
local_nodes<-node_plant_node_ids(g,
v = v,
direction = direction,
max.levels = max.levels)
V(g)$cols<-'grey'
V(g)$cols[v]<-'red'
subg<-subgraph(g,local_nodes$children_found)
g_plot(subg,vertex.color=V(subg)$cols,...)
}
#' simple graph plotting
#'
#' @param g the igraph object to plot
#' @param interactive logical; if TRUE, uses networkD3 for interactive animated plot
#' @export
g_plot <- function(g,interactive=T,...){
if(interactive){
return(g_plot_interactive(g))}
if(!('vertex.label.color' %in% names(list(...)))){vertex.label.color<-'black'}else{vertex.label.color<-list(...)$vertex.label.color}
if(!('vertex.frame.color' %in% names(list(...)))){vertex.frame.color<-'black'}else{vertex.frame.color<-list(...)$vertex.frame.color}
plot.igraph(g,
vertex.size=4,vertex.label.color=vertex.label.color,vertex.frame.color=vertex.frame.color,vertex.label.cex=0.8,vertex.label.dist=1,
vertex.label.family='sans', edge.label.family='sans',
...)
}
#' simplified networkD3::forceNetwork() + with new defaults
#'
#' @param g igraph graph object
#' @groups groups to assign to nodes
#' @weights weights to assign to edges
#' @export
g_plot_interactive<-function(g,groups=1,weights=1){
gd3<-igraph_to_networkD3(g)
gd3$nodes$group<-groups
gd3$links$value<-weights
# why networkD3, why?
d3ColourScale<-function(groups,colors){
jsscale<-paste0('d3.scaleOrdinal().domain([',
paste0(paste0('"',groups,'"'),collapse=","),
"]).range([" ,
paste0(paste0('"',colors,'"'),collapse=","),
"]);")
return(jsscale)
}
charge<--4000
# smaller charge if many nodes:
charge<- charge/log(length(V(g)))
forceNetwork(Links = gd3$links, Nodes = gd3$nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group",
arrows = T,
opacityNoHover = 1,
legend = F,
fontFamily = 'sans-serif',
fontSize = 12,
linkColour = 'grey',
charge = charge,
linkDistance=50,
# width=1,
colourScale = d3ColourScale(groups,'#000000'),
# zoom=F,
opacity=1
)
}
set_defaults<-function(arglist,...){
defaults<-list(...)
for(i in 1:length(defaults)){
if(!(names(defaults)[i]%in%names(arglist))){
arglist[[names(defaults)[i]]]<-defaults[[i]]
}
}
return(arglist)
}
#' plot graph distance matrix
#'
#' @param g igraph graph object
#' @param mode 'in', 'out' or 'all' (for directed graphs)
#' @export
g_plot_distance<-function(g,mode='all'){
dists<-distances(g=g,mode=mode)
return(dists %>% raster %>% plot(box=F,axes=F,frame.plot=F,col=topo.colors(100),xaxt='n',ann=FALSE, yaxt='n',useRaster=F,asp=1))
}
library('apatternlanguage')
library('apatternlanguage')
g<-parse_apl_to_graph()
V(g) %>% as.character
vertex_stats<-g_vertex_stats(g)
number_of_patterns_4_degrees_from_independent_regions<-node_plant_node_ids(g,v=nodeid(g,'independent regions'),direction = 'upstream',max.levels = 5)$downstream_tree %>% length
g_plot_local(g,nodeid(g,'independent region'),direction = 'upstream',max.levels = 2)
g_plot_local(g,nodeid(g,'independent regions'),direction = 'upstream',max.levels = 3)
g_plot_local(g,nodeid(g,'independent region'),direction = 'upstream',max.levels = 2)
g_plot_local(g,nodeid(g,'independent regions'),direction = 'upstream',max.levels = 3)
g_bigplot<-g %>% minimum.spanning.tree
edges_in_min_tree<-                           (igraph::as_data_frame(g,'edges')) %>% .[,1:2]  %>% as.data.frame %>% apply(1,paste0,collapse='---') %in%
((igraph::as_data_frame(g %>% minimum.spanning.tree, 'edges')) %>% .[,1:2]  %>% as.data.frame %>% apply(1,paste0,collapse='---'))
E(g)$edgecol<-'#AAAAAA33'
E(g)$edgecol[edges_in_min_tree]<-'#333333'
# plot.igraph(g_bigplot,vertex.size=1,
#             vertex.label.color='#000000',vertex.frame.color=NA,vertex.label.cex=0.8,vertex.label.dist=0.3,
#               vertex.label.family='sans', edge.label.family='sans',vertex.color='black', edge.color='#88888833',
#               layout=layout_as_tree((g_bigplot),circular=T,root=c(nodeid(g,'independent')),mode='all',flip.y = T))
plot.igraph(g,vertex.size=1,
vertex.label.color='#000000',vertex.frame.color=NA,vertex.label.cex=0.8,vertex.label.dist=0.3,
vertex.label.family='sans', edge.label.family='sans',vertex.color='#AA0000', edge.color=E(g)$edgecol,
layout=layout_as_tree((g),circular=T,root=c(nodeid(g,'independent')),mode='all',flip.y = T),arrow.size=0)
# par(mfrow=c(1,3))
g_plot_local(g,nodeid(g,'independent regions'),direction = 'upstream',max.levels = 4,vertex.label=NA,edge.arrow.size=0.2) %>% print
g_plot_local(g,nodeid(g,'independent regions'),direction = 'upstream',max.levels = 5,vertex.label=NA,edge.arrow.size=0.2)%>% print
g_plot_local(g,nodeid(g,'independent regions'),direction = 'upstream',max.levels = 6,vertex.label=NA,edge.arrow.size=0,edge.color='#00000044')%>% print
# g_plot(g,vertex.label=NA,edge.arrow.size=0,edge.color='#00000044',vertex.color='#FFFFFF')
g_plot_degree_all(g)
no_constructing_patterns<-(degree(g,mode='in')==0) %>% which
vcol<-rep('#00000033',length(V(g)))
vcol[no_constructing_patterns]<-'red'
vlabel<-rep("",length(V(g)))
vlabel[no_constructing_patterns]<-V(g)$name[no_constructing_patterns] %>% tolower
g_plot(g,vertex.label=vlabel,vertex.color=vcol,vertex.frame.color='#00000033',edge.arrow.size=0.2,edge.color='#00000011',interactive = F)
# how often to run simulations?
n.simulations<-10
# standard devation of degrees:
g_hypothesis_test_scalar_statistic(g,n.simulations,function(g){g %>% degree %>% sd}) %>% g_plot_hypothesis_test(main='degree variance compared to random graph')
# overall closeness of giant component:
g_hypothesis_test_scalar_statistic(g,n.simulations,function(g){g %>% g_subgraph_giant_component %>% closeness %>% mean}) %>% g_plot_hypothesis_test(main='average closeness  compared to random graph')
# in closeness
g_hypothesis_test_scalar_statistic(g,n.simulations,function(g){g %>% g_subgraph_giant_component %>% closeness(mode = 'in') %>% mean}) %>% g_plot_hypothesis_test(main='average IN closeness (compared to randomised graphs)')
g_hypothesis_test_scalar_statistic(g,n.simulations,function(g){g %>% g_subgraph_giant_component %>% closeness(mode = 'out') %>% mean}) %>%
g_plot_hypothesis_test(main='average OUT closeness (compared to randomised graphs)')
g_plot_vertex_stats_degree_in_out(g)
g_plot_distance(g)
g_plot_vertex_stats_closeness_in_out(g)
vs<-g_vertex_stats(g)
list_lowest_in_closeness<-vs[which(vs$cl_in < 0.1),'name'] %>% tolower
ord<- strsplit(list_lowest_in_closeness," ") %>% sapply(function(x){x[1]}) %>% as.numeric %>% order
list_lowest_in_closeness <- list_lowest_in_closeness[ord] %>%  paste('\n- ',.) %>% paste(collapse='')
list_lowest_out_closeness<-vs[which(vs$cl_out < 0.1),'name'] %>% tolower
ord <- strsplit(list_lowest_out_closeness," ") %>% sapply(function(x){x[1]}) %>% as.numeric %>% order
list_lowest_out_closeness<- list_lowest_out_closeness[ord] %>%  paste('\n- ',.) %>% paste(collapse='')
list_lowest_out_closeness %>%  cat
list_lowest_in_closeness %>% cat
nodes_on_shortest_path<-igraph::shortest_paths(g,from=nodeid(g,'climbing plants'),to = nodeid(g,'independent regions'))$vpath[[1]]
sub<-subgraph(g,c(nodes_on_shortest_path,V(g)[nodeid(g,'plant')]))
V(sub)$x=1
V(sub)$y=order(closeness(sub,mode='in'))
g_plot(sub,interactive = F)
whole<-g
V(whole)$x<-c(2:length(V(whole))-1,1) # for some reason all is in order except independent region is last. this is a problem with the edge names / vertex names not matching so graph is constructed without vertex list
rank<-page.rank(whole)
V(whole)$y<- page_rank_standardised(whole,"in")
V(whole)$x<- page_rank_standardised(whole,"out")
V(whole)$x<-c(2:253,1)
V(whole)$closeness_ratio<-closeness(whole,vids = V(whole),'in') / closeness(whole,vids = V(whole),'out')
V(whole)$closeness_ratio<-V(whole)$closeness_ratio+min(V(whole)$closeness_ratio)+1
V(whole)$chapter_number<-c(2:253,1)
V(whole)$closeness_ratio_rank<-order(V(whole)$closeness_ratio,decreasing = T)
V(whole)$closeness_difference<-closeness(whole,vids = V(whole),'in') - closeness(whole,vids = V(whole),'out')
V(whole)$closeness_difference<-V(whole)$closeness_difference+min(V(whole)$closeness_difference)+1
V(whole)$chapter_number<-c(2:253,1)
V(whole)$closeness_difference_rank<-order(V(whole)$closeness_difference,decreasing = T)
V(whole)$reachable_downstream<-distances(whole,V(g),V(g),mode = 'in') %>% is.finite %>% rowSums
V(whole)$reachable_upstream<-distances(whole,V(g),V(g),mode = 'out') %>% is.finite %>% rowSums
vdf<-igraph::as_data_frame(whole,'vertices')
ggplot(vdf,aes(x=reachable_downstream,y=reachable_upstream))+geom_bin2d(alpha=0.2,binwidth=30)+theme_minimal()+
scale_color_gradient(low="white",high="black")+
scale_fill_continuous(type = 'gradient')
# dists<-is.finite(dists)
# dists %>% rowSums
# dists
#
#
# dists %>% colnames
# ?shortest.paths
vdf<-igraph::as_data_frame(whole,'vertices')
ggplot(vdf)+geom_segment(aes(x=0,y=chapter_number,xend=1,yend=closeness_ratio_rank))
ggplot(vdf,aes(chapter_number,closeness_difference_rank))+geom_point(color='grey')+theme_minimal()+geom_text(aes(label=name),size=1,angle=-33)+geom_abline(intercept=253,slope=-1)
ggplot(vdf,aes(chapter_number,closeness_ratio_rank))+geom_point(color='grey')+theme_minimal()+geom_text(aes(label=name),size=1,angle=-33)+scale_y_log10()+geom_abline(intercept=253,slope=-1)
# scale_x_log10()
vertices_w_labels<-V(sub) %>% names %>% sapply(nodeid,g=g) %>% unname
V(whole)$label<-""
V(whole)$label[vertices_w_labels]<-names(V(whole))[vertices_w_labels]
V(whole)$color<-'#000000AA'
V(whole)$color[vertices_w_labels]<-"#FF0000"
plot.igraph(whole, vertex.size = 4, vertex.label.cex = 0.8,
vertex.label.dist = 1, vertex.label.family = "sans",edge.color=NA,vertex.frame.color='#000000AA',vertex.label.color='black')
# geom_segment()
nodes_on_shortest_path<-igraph::shortest_paths(g,from=nodeid(g,'climbing plants'),to = nodeid(g,'independent regions'))$vpath[[1]]
sub<-subgraph(g,c(nodes_on_shortest_path,V(g)[nodeid(g,'plant')]))
V(sub)$x=1
V(sub)$y=order(closeness(sub,mode='in'))
g_plot(sub,interactive = F)
whole<-g
V(whole)$x<-c(2:length(V(whole))-1,1) # for some reason all is in order except independent region is last. this is a problem with the edge names / vertex names not matching so graph is constructed without vertex list
rank<-page.rank(whole)
V(whole)$y<- page_rank_standardised(whole,"in")
V(whole)$x<- page_rank_standardised(whole,"out")
V(whole)$x<-c(2:253,1)
V(whole)$closeness_ratio<-closeness(whole,vids = V(whole),'in') / closeness(whole,vids = V(whole),'out')
V(whole)$closeness_ratio<-V(whole)$closeness_ratio+min(V(whole)$closeness_ratio)+1
V(whole)$chapter_number<-c(2:253,1)
V(whole)$closeness_ratio_rank<-order(V(whole)$closeness_ratio,decreasing = T)
V(whole)$closeness_difference<-closeness(whole,vids = V(whole),'in') - closeness(whole,vids = V(whole),'out')
V(whole)$closeness_difference<-V(whole)$closeness_difference+min(V(whole)$closeness_difference)+1
V(whole)$chapter_number<-c(2:253,1)
V(whole)$closeness_difference_rank<-order(V(whole)$closeness_difference,decreasing = T)
V(whole)$reachable_downstream<-distances(whole,V(g),V(g),mode = 'in') %>% is.finite %>% rowSums
V(whole)$reachable_upstream<-distances(whole,V(g),V(g),mode = 'out') %>% is.finite %>% rowSums
vdf<-igraph::as_data_frame(whole,'vertices')
ggplot(vdf,aes(x=reachable_downstream,y=reachable_upstream))+geom_bin2d(alpha=0.2,binwidth=30)+theme_minimal()+
scale_color_gradient(low="white",high="black")+
scale_fill_continuous(type = 'gradient')
# dists<-is.finite(dists)
# dists %>% rowSums
# dists
#
#
# dists %>% colnames
# ?shortest.paths
vdf<-igraph::as_data_frame(whole,'vertices')
ggplot(vdf)+geom_segment(aes(x=0,y=chapter_number,xend=1,yend=closeness_ratio_rank))
ggplot(vdf,aes(chapter_number,closeness_difference_rank))+geom_point(color='grey')+theme_minimal()+geom_text(aes(label=name),size=1,angle=-33)+geom_abline(intercept=253,slope=-1)
ggplot(vdf,aes(chapter_number,closeness_ratio_rank))+geom_point(color='grey')+theme_minimal()+geom_text(aes(label=name),size=1,angle=-33)+scale_y_log10()+geom_abline(intercept=253,slope=-1)
# scale_x_log10()
vertices_w_labels<-V(sub) %>% names %>% sapply(nodeid,g=g) %>% unname
V(whole)$label<-""
V(whole)$label[vertices_w_labels]<-names(V(whole))[vertices_w_labels]
V(whole)$color<-'#000000AA'
V(whole)$color[vertices_w_labels]<-"#FF0000"
plot.igraph(whole, vertex.size = 4, vertex.label.cex = 0.8,
vertex.label.dist = 1, vertex.label.family = "sans",edge.color=NA,vertex.frame.color='#000000AA',vertex.label.color='black')
# geom_segment()
g_plot(subgraph(g,c(nodeid(g,'web of shopping'),nodeid(g,'local transport'),nodeid(g,'magic'))),interactive = F)
g_plot_local(g,nodeid(g,'magic'),'downstream',2,main='"magic of the city is part of:',interactive = F)
g_plot_local(g,nodeid(g,'magic'),'upstream',2,main='magic of the city is composed of:',interactive = F)
js<-function(jscode){
open<-"<script>"
close<-"</script>"
paste(open,jscode,close,collapse='\n')
}
css<-function(css){
open<-"<style>"
close<-"</style>"
paste(open,css,close,collapse='\n')
}
css('
.nodetext{font:12px sans-serif !important;}
.main-container{
}
') %>% cat
js("console.log('TESTTESTTEST')") %>% cat
x<-system.file("","apl.Rmd",package = "apatternlanguage")
rmarkdown::render(x,output_file = './a_pattern_language.html',output_dir = '~/')
browseURL('./a_pattern_language.html')
browseURL('./a_pattern_language.html')
library(lifx)
library(lifxm)
chill()
lx_color(brightness = 1)
lx_color(brightness = 0.5)
chill()
chill()
work()
chill()
chill(brightness = 0.5)
chill()
lx_color(brightness = 1)
lifxm::chill()
lifxm::tv()
lifxm::style()
lifxm::hang()
lifxm::hang()
library(magrittr)
lifxm::hang()
library(lifx)
lifxm::hang()
lifxm::down()
lifxm::down()
lifxm::down()
library(shiny)
install.packages("shiny")
library('apatternlanguage')
library(ggthemes)
library(ggplot2)
g<-parse_apl_to_graph()
degree(g)
degree(g, mode = "in")
degree(g, mode = "in")[degree(g, mode = "in")==0]
atomic_patterns<-degree(g, mode = "in")[degree(g, mode = "in")==0]
nodeid(g,atomic_patterns)
sapply(atomic_patterns,nodeid,g=g)
dists<-shortest.paths(graph = g,to = sapply(atomic_patterns,nodeid,g=g),mode = "out")
atomic_patterns
names(atomic_patterns)
dists<-shortest.paths(graph = g,to = sapply(names(atomic_patterns),nodeid,g=g),mode = "out")
dists
dists<-shortest.paths(graph = g,to = sapply(names(atomic_patterns),nodeid,g=g),mode = "in")
dists
dists<-lapply(dists,function(x){x[!is.finite(x)]<-NA})
dists
dists
dists<-shortest.paths(graph = g,to = sapply(names(atomic_patterns),nodeid,g=g),mode = "in")
dists
dists<-apply(dists,1,function(x){x[!is.finite(x)]<-NA})
dists
dists<-shortest.paths(graph = g,to = sapply(names(atomic_patterns),nodeid,g=g),mode = "in") %>% as.data.frame
dists
dists<-lapply(dists,1,function(x){x[!is.finite(x)]<-NA}) %>% as.data.frame
dists<-lapply(dists,function(x){x[!is.finite(x)]<-NA}) %>% as.data.frame
dists
dists<-shortest.paths(graph = g,to = sapply(names(atomic_patterns),nodeid,g=g),mode = "in") %>% as.data.frame
dists
dists<-lapply(dists,function(x){x[!is.finite(x)]<-NA;x}) %>% as.data.frame
dists
dists
colSums(dists,na.rm = T)
dists<-rowSums(dists,na.rm = T)
dists
as.vector(dists)
df<-data.frame(distance_to_ir = as.vector(dists), id = apl_chapter_number(g), name = names(V(g)))
ggplot(df,aes(y=distance_to_ir,x=id))+geom_jitter(height = 0.1, width = 0,alpha = 0.5)+
geom_text(aes(label=name),nudge_y = 0.3, cex = 2, check_overlap = T,position = )+
theme_minimal()+xlab("chapter number")+ylab("distance to independent regions")
warnings()
library('apatternlanguage')
library(ggthemes)
library(ggplot2)
g<-parse_apl_to_graph()
degree(g)
which(degree(g)>30)
V(g)[[30]]
V(g)[[38]]
MAX(degree(g)>30)
max(degree(g)>30)
max(degree(g))
which.max(degree(g))
V(g)[[92]]
library(igraph)
?ends
neighborhood(g,nodes = V(g)[[92]])
neighborhood(g,nodes = V(g)[[92]]) %>% plot
neighborhood(g,nodes = V(g)[[92]]) %>% unlist
debugonce(parse_apl_to_graph)
g<-parse_apl_to_graph()
str(apl)
apl[[92]]
apl[[94]]
apl[[95]]
(lapply(apl, function(x) {
strsplit(x[1], split = "\n")[[1]][1]
}) %>% unlist)
partA <- lapply(seq_along(b), function(i) {
cbind(rep(chapter_headings[i], length(unlist(b[[i]][1]))),
unlist(b[[i]][1]))
}) %>% do.call(rbind, .)
partB <- lapply(seq_along(b), function(i) {
cbind(rep(chapter_headings[i], length(unlist(b[[i]][2]))),
unlist(b[[i]][2]))
}) %>% do.call(rbind, .)
partC <- lapply(seq_along(b), function(i) {
cbind(rep(chapter_headings[i], length(unlist(b[[i]][3]))),
unlist(b[[i]][3]))
}) %>% do.call(rbind, .)
el <- rbind(data.frame(from = partA[, 1], to = partA[, 2],
part = "A"), data.frame(from = partC[, 2], to = partC[,
1], part = "C"))
chapter_headings
b[[95]]
apl <- unlist(strsplit(apatternlanguage::apl, chapter_divider))[-1]
apl <- lapply(lapply(apl, strsplit, split = section_divider),
unlist)
b <- lapply(apl, function(chapter) {
lapply(chapter, function(x) {
links <- str_extract_all(x, "\\([0-9][0-9]*\\)") %>%
unlist %>% gsub("[^0-9]", "", .) %>% as.numeric
})
})
b[[95]]
chapter_divider <- ">>>>>"
section_divider <- "<<<<<"
apl <- unlist(strsplit(apatternlanguage::apl, chapter_divider))[-1]
apl <- lapply(lapply(apl, strsplit, split = section_divider),
unlist)
b <- lapply(apl, function(chapter) {
lapply(chapter, function(x) {
links <- str_extract_all(x, "\\([0-9][0-9]*\\)") %>%
unlist %>% gsub("[^0-9]", "", .) %>% as.numeric
})
})
b[[95]]
b <- b %>% lapply(function(x) {
lapply(x, function(x) {
chapter_headings[x]
})
})
b[[95]]
debugonce(parse_apl_to_graph)
g<-parse_apl_to_graph()
apl[[95]]
str_extract_all(apl[[95]], "\\([0-9][0-9]*\\)")
str_extract_all(apl[[95]], "\\([0-9][0-9]*\\)")%>%
unlist %>% gsub("[^0-9]", "", .) %>% as.numeric
b[[95]]
b[[95]]
x<-b %>% lapply(function(x) {
lapply(x, function(x) {
chapter_headings[x]
})
})
x[[95]]
b[[95]]
names(b)[[95]]
names(b)[[93]]
names(b)[[95]]
names(b) <- chapter_headings
b <- b %>% lapply(function(x) {
lapply(x, function(x) {
chapter_headings[x]
})
})
debugonce(parse_apl_to_graph)
g<-parse_apl_to_graph()
b[[95]]
b[[95]]
names(b[[95]])
names(b)[95]
b[[95]]
names(b[[95]])
names(b)[[95]]
partA[[95]]
partA[[94]]
partA[[93]]
partA
partA[partA[1,]=="95 BUILDING COMPLEX"]
partA[partA[1,]=="95 BUILDING COMPLEX",]
partA[partA[2,]=="95 BUILDING COMPLEX",]
as.vector(partA)
as.vector(partA) %>% grepl(95)
as.vector(partA) %>% grepl("95",.)
as.vector(partA) %>% grep("95",.,value=T)
as.vector(partA) %>% grep("95",.,)
as.vector(partA[1,]) %>% grep("95",.,)
as.vector(partA[,1]) %>% grep("95",.,)
as.vector(partA[,2]) %>% grep("95",.,)
partA[as.vector(partA[,1]) %>% grep("95",.,),]
partA[as.vector(partA[,1]) %>% grep("95 B",.,),]
partB[as.vector(partB[,1]) %>% grep("95 B",.,),]
partC[as.vector(partB[,1]) %>% grep("95 B",.,),]
partC[as.vector(partB[,2]) %>% grep("95 B",.,),]
partC[as.vector(partC[,2]) %>% grep("95 B",.,),]
partC[as.vector(partC[,1]) %>% grep("95 B",.,),]
degree(g)[95]
degree(g)[94]
degree(g)[96]
degree(g)[97]
degree(g)["95 BUILDING COMPLEX"]
degree(g,mode = "in")["95 BUILDING COMPLEX"]
degree(g,mode = "out")["95 BUILDING COMPLEX"]
neighbors(g,"95 BUILDING COMPLEX")
neighbors(g,"95 BUILDING COMPLEX","in")
neighbors(g,"95 BUILDING COMPLEX","out")
neighbors(g,"95 BUILDING COMPLEX","in")
neighbors(g,"95 BUILDING COMPLEX",mode ="in")
neighbors(g,"95 BUILDING COMPLEX",mode ="out")
neighbors(g,"95 BUILDING COMPLEX",mode ="in")
render_apl_article<-function(output_file = './a_pattern_language.html',output_dir = '~/'){
x<-system.file("","apl.Rmd",package = "apatternlanguage")
rmarkdown::render(x,output_file,output_dir)
browseURL(file.path(output_dir,output_file))
}
render_apl_article()
traceback()
x<-system.file("","apl.Rmd",package = "apatternlanguage")
rmarkdown::render(x,output_file,output_dir)
output_file = './a_pattern_language.html'
output_dir = '~/'
x<-system.file("","apl.Rmd",package = "apatternlanguage")
rmarkdown::render(x,output_file,output_dir)
apatternlanguage::apl
apatternlanguage::apl %>% str
apatternlanguage::chapter_headings
apl_graph<-parse_apl_to_graph(apl)
usethis::use_package("magrittr",type="Depends")
usethis::use_package("igraph",type="Depends")
apl_graph<-parse_apl_to_graph(apatternlanguage::apl)
parse_apl_to_graph
apl_graph<-parse_apl_to_graph()
class(apl_graph)
usethis::use_data(apl_graph)
devtools::document()
devtools::install()
